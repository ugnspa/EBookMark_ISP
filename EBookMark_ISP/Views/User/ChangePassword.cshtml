@model string

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <h2>Change Password</h2>
            <form id="passwordForm" action="ChangePassword" method="post">
                <div class="mb-3">
                    <label for="oldPassword" class="form-label">Old Password</label>
                    <input type="password" class="form-control" id="oldPassword" name="oldPassword" oninput="checkOld()" required>
                    <div id="oldPasswordError" class="invalid-feedback"></div>
                </div>
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="newPassword" name="newPassword" oninput="checkOldNew()" required>
                    <div id="newOldPasswordError" class="invalid-feedback"></div>
                </div>
                <div class="mb-3">
                    <label for="confirmNewPassword" class="form-label">Confirm New Password</label>
                    <input type="password" class="form-control" id="confirmNewPassword" name="confirmNewPassword" oninput="checkNew()" required>
                    <div id="newPasswordError" class="invalid-feedback"></div>
                </div>
                <button type="submit" class="btn btn-primary">Change Password</button>
            </form>
        </div>
    </div>
</div>
<script>
    var modelHash = '@Model';

    async function checkOld(){
        var oldPassword = document.getElementById('oldPassword');
        var oldPassHash = await hash(oldPassword.value);
        var oldPasswordError = document.getElementById('oldPasswordError');

        if (oldPassHash != modelHash) {
            oldPasswordError.textContent = 'Old Password is not correct.';
            oldPassword.classList.add('is-invalid');
            return false;
        } else {
            oldPasswordError.textContent = '';
            oldPassword.classList.remove('is-invalid');
        }
        return true;
    }

    async function checkNew(){
        var newPassword = document.getElementById('newPassword').value;
        var confirmNewPassword = document.getElementById('confirmNewPassword').value;
        var newPasswordError = document.getElementById('newPasswordError');

        if (newPassword !== confirmNewPassword) {
            newPasswordError.textContent = 'New Passwords must match.';
            document.getElementById('confirmNewPassword').classList.add('is-invalid');
            return false;
        } else {
            newPasswordError.textContent = '';
            document.getElementById('confirmNewPassword').classList.remove('is-invalid');
        }
        return true;
    }

    async function checkOldNew(){
        var newPassword = document.getElementById('newPassword').value;
        var newPassHash = await hash(newPassword);
        var newOldPasswordError = document.getElementById('newOldPasswordError');
        if (newPassHash === modelHash) {
            newOldPasswordError.textContent = 'New Password cannot be the same as the old.';
            document.getElementById('newPassword').classList.add('is-invalid');
            return false;
        } else {
            document.getElementById('newPassword').classList.remove('is-invalid');
            newOldPasswordError.textContent = '';
        }
        return true;
    }

    async function hash(string) {
      const utf8 = new TextEncoder().encode(string);
      const hashBuffer = await crypto.subtle.digest('SHA-256', utf8);
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray
        .map((bytes) => bytes.toString(16).padStart(2, '0'))
        .join('');
      return hashHex;
    }

    document.getElementById('passwordForm').onsubmit = async function (event) {
        event.preventDefault(); 
        var isValid = await checkOld();
        var isValid1 = await checkNew();
        var isValid2 = await checkOldNew();
        if (isValid && isValid1 && isValid2) {
            this.submit();
        }
    };

</script>

